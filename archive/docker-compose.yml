# ==============================================================================
# Docker Compose - Ambiente de Desenvolvimento Local
# ==============================================================================
#
# Serviços:
# - API: FastAPI inference API
# - MLflow: Tracking server
# - Postgres: Backend para MLflow
# - Nginx: Reverse proxy (opcional)
# - Redis: Cache para API
#
# Autor: Time de Data Science
# Data: Outubro 2025
#

version: '3.8'

services:
  
  # ============================================================================
  # PostgreSQL Database (backend para MLflow)
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: aml-postgres
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow_secret
      POSTGRES_DB: mlflow_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aml-network
    restart: unless-stopped
  
  # ============================================================================
  # MLflow Tracking Server
  # ============================================================================
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.8.1
    container_name: aml-mlflow
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow_secret@postgres:5432/mlflow_db
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - aml-network
    restart: unless-stopped
  
  # ============================================================================
  # AML Pipeline REST API (FastAPI)
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: aml-api
    image: aml-api:latest
    environment:
      AML_CONFIG_PATH: /app/config.yaml
      AML_MODEL_PATH: /app/artifacts/models/
      AML_LOG_LEVEL: info
      AML_API_HOST: 0.0.0.0
      AML_API_PORT: 8000
      MLFLOW_TRACKING_URI: http://mlflow:5000
      REDIS_URL: redis://:aml_cache_secret@redis:6379/0
    volumes:
      # Montar artefatos e dados locais
      - ./artifacts:/app/artifacts:ro
      - ./data:/app/data:ro
      - ./logs:/app/logs
      # Desenvolvimento: montar código fonte (opcional)
      # - ./src:/app/src
    ports:
      - "8000:8000"
    depends_on:
      mlflow:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aml-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  
  # ============================================================================
  # Nginx Reverse Proxy (opcional)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: aml-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - api
      - mlflow
    networks:
      - aml-network
    restart: unless-stopped
    profiles:
      - production  # Apenas em produção

  # ============================================================================
  # Redis Cache (para API caching)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: aml-redis
    command: redis-server --appendonly yes --requirepass aml_cache_secret
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aml-network
    restart: unless-stopped

  # ============================================================================
  # AML Dashboard (Streamlit)
  # ============================================================================
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
      target: production
    container_name: aml-dashboard
    image: aml-dashboard:latest
    environment:
      AML_CONFIG_PATH: /app/config.yaml
      AML_MODEL_PATH: /app/artifacts/models/
      AML_LOG_LEVEL: info
      STREAMLIT_SERVER_HEADLESS: true
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      AML_API_BASE_URL: http://api:8000
    volumes:
      # Montar artefatos e dados locais
      - ./artifacts:/app/artifacts:ro
      - ./data:/app/data:ro
      - ./logs:/app/logs
      # Montar código fonte para desenvolvimento
      - ./dashboard:/app/dashboard:ro
      - ./config:/app/config:ro
    ports:
      - "8501:8501"
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aml-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

# ==============================================================================
# Volumes Persistentes
# ==============================================================================
volumes:
  postgres_data:
    name: aml-postgres-data
  mlflow_artifacts:
    name: aml-mlflow-artifacts
  redis_data:
    name: aml-redis-data

# ==============================================================================
# Networks
# ==============================================================================
networks:
  aml-network:
    name: aml-network
    driver: bridge

# ==============================================================================
# Usage Instructions
# ==============================================================================
#
# Iniciar todos os serviços (incluindo dashboard):
#   docker-compose up -d
#
# Iniciar apenas dashboard + API + MLflow + Postgres:
#   docker-compose up -d dashboard api mlflow postgres redis
#
# Iniciar apenas dashboard:
#   docker-compose up -d dashboard
#
# Iniciar com Nginx (produção):
#   docker-compose --profile production up -d
#
# Ver logs:
#   docker-compose logs -f api
#   docker-compose logs -f mlflow
#
# Parar todos:
#   docker-compose down
#
# Parar e remover volumes:
#   docker-compose down -v
#
# Rebuild API:
#   docker-compose build api
#   docker-compose up -d api
#
# Acessar serviços:
#   - Dashboard:     http://localhost:8501
#   - API:          http://localhost:8000
#   - API Docs:     http://localhost:8000/docs
#   - API ReDoc:    http://localhost:8000/redoc
#   - MLflow UI:    http://localhost:5000
#   - Health Check: http://localhost:8000/health
#   - Metrics:      http://localhost:8000/metrics
#   - Cache Status: http://localhost:8000/cache/status
#
# ==============================================================================
