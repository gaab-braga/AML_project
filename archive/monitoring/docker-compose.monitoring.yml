# AML Pipeline Monitoring Stack
# Docker Compose configuration for Prometheus + Grafana

version: '3.8'

services:
  # ========================================================================
  # PROMETHEUS - Metrics Collection
  # ========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: aml-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================================================
  # GRAFANA - Dashboard & Visualization
  # ========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: aml-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================================================
  # NODE EXPORTER - System Metrics
  # ========================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: aml-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring
    restart: unless-stopped

  # ========================================================================
  # ALERTMANAGER - Alert Management
  # ========================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: aml-alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - monitoring
    restart: unless-stopped

  # ========================================================================
  # CADVISOR - Container Metrics
  # ========================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: aml-cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring
    restart: unless-stopped
    privileged: true

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  monitoring:
    driver: bridge

# ==============================================================================
# Usage Instructions
# ==============================================================================
#
# Start monitoring stack:
#   docker-compose -f docker-compose.monitoring.yml up -d
#
# Access services:
#   - Grafana:    http://localhost:3000 (admin/admin)
#   - Prometheus: http://localhost:9090
#   - AlertManager: http://localhost:9093
#
# Stop monitoring stack:
#   docker-compose -f docker-compose.monitoring.yml down
#
# View logs:
#   docker-compose -f docker-compose.monitoring.yml logs -f grafana
#
# ==============================================================================