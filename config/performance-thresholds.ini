# AML Pipeline Performance Thresholds and Monitoring Configuration

# This file defines performance baselines, monitoring thresholds, and alerting rules
# for the AML Pipeline production environment

# ========================================================================
# PERFORMANCE BASELINES (Established from benchmarking)
# ========================================================================

[performance.baselines]
# Response Time Baselines (milliseconds)
api_response_time_p50 = 150    # 50th percentile
api_response_time_p95 = 450    # 95th percentile (SLA target: <500ms)
api_response_time_p99 = 800    # 99th percentile

# Prediction Performance
prediction_latency_p50 = 200   # 50th percentile
prediction_latency_p95 = 800   # 95th percentile (SLA target: <1000ms)

# Throughput Baselines
requests_per_second = 50       # Sustained RPS
peak_requests_per_second = 100 # Peak load capacity

# Error Rate Baselines
error_rate_threshold = 0.05    # 5% error rate (SLA target: <10%)
critical_error_rate = 0.10     # 10% triggers critical alert

# ========================================================================
# MONITORING THRESHOLDS
# ========================================================================

[monitoring.thresholds]
# System Resources
cpu_usage_warning = 70         # CPU usage warning threshold (%)
cpu_usage_critical = 85        # CPU usage critical threshold (%)

memory_usage_warning = 75      # Memory usage warning threshold (%)
memory_usage_critical = 90     # Memory usage critical threshold (%)

disk_usage_warning = 80        # Disk usage warning threshold (%)
disk_usage_critical = 95       # Disk usage critical threshold (%)

# Application Metrics
active_connections_warning = 100  # Database connections warning
active_connections_critical = 200 # Database connections critical

cache_hit_rate_warning = 0.85     # Cache hit rate warning (85%)
cache_hit_rate_critical = 0.70    # Cache hit rate critical (70%)

# Business Metrics
fraud_alerts_per_hour_warning = 100   # Fraud alerts per hour warning
fraud_alerts_per_hour_critical = 500  # Fraud alerts per hour critical

transactions_per_hour_minimum = 10    # Minimum transactions per hour

# ========================================================================
# ALERTING RULES
# ========================================================================

[alerting.rules]
# Critical Alerts (Immediate Response Required)
critical_response_time = "http_request_duration_seconds{quantile='0.95'} > 1.0"  # >1 second
critical_error_rate = "rate(http_requests_total{status=~'5..'}[5m]) / rate(http_requests_total[5m]) > 0.10"  # >10%
critical_system_down = "up{job='aml-api'} == 0"  # Service down

# Warning Alerts (Response within 30 minutes)
warning_response_time = "http_request_duration_seconds{quantile='0.95'} > 0.5"  # >500ms
warning_error_rate = "rate(http_requests_total{status=~'5..'}[5m]) / rate(http_requests_total[5m]) > 0.05"  # >5%
warning_high_cpu = "100 - (avg by(instance) irate(node_cpu_seconds_total{mode='idle'}[5m])) * 100 > 85"
warning_high_memory = "(1 - node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 > 90"

# Business Alerts
business_low_transactions = "increase(aml_transactions_total[1h]) < 10"  # <10 transactions/hour
business_high_fraud_rate = "rate(aml_fraud_alerts_total[1h]) > 500"  # >500 fraud alerts/hour
business_model_accuracy_drop = "aml_model_accuracy < 0.85"  # Accuracy <85%

# ========================================================================
# AUTO-SCALING POLICIES
# ========================================================================

[autoscaling.policies]
# ECS Service Auto-scaling
cpu_target_value = 70          # Target CPU utilization (%)
memory_target_value = 75       # Target memory utilization (%)
min_capacity = 2               # Minimum number of tasks
max_capacity = 10              # Maximum number of tasks

# Scale-out triggers
scale_out_cpu_threshold = 80   # Scale out when CPU >80%
scale_out_requests_threshold = 1000  # Scale out when requests/min >1000

# Scale-in triggers
scale_in_cpu_threshold = 30    # Scale in when CPU <30%
scale_in_requests_threshold = 200   # Scale in when requests/min <200

# Cooldown periods (seconds)
scale_out_cooldown = 300       # 5 minutes
scale_in_cooldown = 600        # 10 minutes

# ========================================================================
# SLA DEFINITIONS
# ========================================================================

[sla.definitions]
# Service Level Agreements
availability_sla = 0.999       # 99.9% uptime (8.77 hours downtime/year)
response_time_sla = 0.95       # 95% of requests <500ms
error_rate_sla = 0.99          # 99% success rate

# SLA Measurement Windows
measurement_window_hours = 24  # 24-hour rolling window
reporting_interval_days = 30   # Monthly SLA reports

# SLA Penalties (if applicable)
response_time_penalty_threshold = 0.90  # <90% triggers penalty
availability_penalty_threshold = 0.995  # <99.5% triggers penalty

# ========================================================================
# COST OPTIMIZATION
# ========================================================================

[cost_optimization.targets]
# Resource utilization targets
cpu_utilization_target = 65    # Target CPU utilization for cost optimization
memory_utilization_target = 70 # Target memory utilization

# Reserved instances (if applicable)
reserved_instance_coverage = 0.70  # 70% coverage with reserved instances

# Spot instances (if applicable)
spot_instance_usage = 0.30     # 30% of workloads on spot instances

# Cost monitoring thresholds
monthly_budget_limit = 5000    # Monthly budget limit ($)
budget_alert_threshold = 0.80  # Alert at 80% of budget

# ========================================================================
# PERFORMANCE DEGRADATION DETECTION
# ========================================================================

[performance_degradation.baseline]
# Baseline values (updated weekly)
baseline_response_time_p95 = 450  # ms
baseline_error_rate = 0.02        # 2%
baseline_throughput = 50          # RPS

# Degradation thresholds
degradation_response_time_percent = 20  # 20% increase triggers alert
degradation_error_rate_percent = 100    # 2x increase triggers alert
degradation_throughput_percent = 25     # 25% decrease triggers alert

# Anomaly detection
anomaly_detection_window = 24    # 24-hour analysis window
anomaly_sensitivity = 0.95       # 95% confidence for anomalies

# ========================================================================
# MAINTENANCE WINDOWS
# ========================================================================

[maintenance.windows]
# Scheduled maintenance
maintenance_day = "sunday"      # Weekly maintenance day
maintenance_start_time = "02:00" # Maintenance start time (UTC)
maintenance_duration_hours = 4  # Maintenance window duration

# Emergency maintenance
emergency_maintenance_max_duration = 2  # Maximum emergency maintenance (hours)

# Maintenance notifications
maintenance_notification_days = 7  # Days advance notice for scheduled maintenance

# ========================================================================
# COMPLIANCE MONITORING
# ========================================================================

[compliance.monitoring]
# Data retention
audit_log_retention_days = 2555  # 7 years for financial data
metrics_retention_days = 90      # 90 days for operational metrics

# Access logging
api_access_logging = true        # Log all API access
admin_access_logging = true      # Log all admin access
data_access_logging = true       # Log all data access

# Compliance checks
automated_compliance_checks = true  # Run automated compliance validation
compliance_check_frequency = "daily"  # Daily compliance checks
compliance_report_frequency = "monthly"  # Monthly compliance reports

# ========================================================================
# DASHBOARD CONFIGURATION
# ========================================================================

[dashboard.configuration]
# Grafana dashboard settings
dashboard_refresh_interval = "30s"  # Dashboard auto-refresh
alert_evaluation_interval = "1m"    # Alert evaluation interval

# Dashboard panels
performance_panels_enabled = true
business_metrics_enabled = true
system_health_enabled = true
alert_summary_enabled = true

# Custom panels
custom_panels = [
    "prediction_accuracy_trend",
    "fraud_detection_effectiveness",
    "system_resource_forecast",
    "cost_analysis"
]